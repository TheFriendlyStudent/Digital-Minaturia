/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    google()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation group: 'org.apache.xmlgraphics', name: 'batik-swing', version: '1.19'
    implementation group: 'org.apache.xmlgraphics', name: 'batik-util', version: '1.19'
    implementation group: 'org.eclipse.birt.runtime.3_7_1', name: 'org.w3c.dom.svg', version: '1.1.0'
    implementation group: 'org.apache.xmlgraphics', name: 'batik-anim', version: '1.19'
    implementation 'org.apache.xmlgraphics:batik-all:1.19'
    implementation 'com.google.api-client:google-api-client:2.7.2'
    implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20230815-2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.whogames.digitalminaturia.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task fatJar(type: Jar) {
    archiveBaseName = "Digital_Minaturia"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Main-Class': application.mainClass.get()
        )
    }
from {
    configurations.runtimeClasspath.collect { file ->
        if (file.isDirectory()) {
            file
        } else {
            zipTree(file).matching {
                exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
            }
        }
    }
}

    from sourceSets.main.output  // <-- this includes your compiled .class files
}



