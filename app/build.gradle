/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation group: 'org.apache.xmlgraphics', name: 'batik-swing', version: '1.19'
    implementation group: 'org.apache.xmlgraphics', name: 'batik-util', version: '1.19'
    implementation group: 'org.eclipse.birt.runtime.3_7_1', name: 'org.w3c.dom.svg', version: '1.1.0'
    implementation group: 'org.apache.xmlgraphics', name: 'batik-anim', version: '1.19'
    implementation 'org.apache.xmlgraphics:batik-all:1.19'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.whogames.digitalminaturia.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task fatJar(type: Jar) {
    archiveBaseName = "${project.name}-all"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Main-Class': application.mainClass.get() // keep this if mainClass is a Provider
        )
    }
    from {
        configurations.runtimeClasspath.filter { it.name.endsWith('.jar') }.collect { zipTree(it) }
    }
    with jar
}



